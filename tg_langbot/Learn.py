from Api import Api, get_audio, get_tg_link
from telebot import types
import random

from BackendApi import LangBotApi

BASE_URL_IMAGE = "http://0.0.0.0:8000"
pos_dict = {
    "indefinite article": "–ù–µ–æ–ø—Ä–µ–¥–µ–ª–Ω–Ω—ã–π –∞—Ä—Ç–∏–∫–ª—å",
    "verb": "–ì–ª–∞–≥–æ–ª",
    "noun": "–°—É—â–µ—Å—Ç–≤–∏–µ–ª—å–Ω–æ–µ",
    "adjective": "–ü—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω–æ–µ",
    "adverb": "–ù–∞—Ä–µ—á–∏–µ",
    "preposition": "–ü—Ä–µ–¥–ª–æ–≥",
    "pronoun": "pronoun",

}
levels_str = {"–Ω–∞—á–∞–ª—å–Ω—ã–π": "Beginner",
              "a1": "Elementary",
              "a2": "Pre-Intermediate",
              "b1": "Intermediate",
              "b2": "Upper-Intermediate",
              "c1": "Advanced",
              "c2": "Proficiency"
              }


class LearnWords:

    def start_learning(self, chat_id):
        data = Api().get_new_words(chat_id)
        if data is False:
            if not Api().is_allowed_today(chat_id):
                return
        keyboard = types.InlineKeyboardMarkup()
        button = types.InlineKeyboardButton(text="–Ø –≤—Å–µ –∑–∞–ø–æ–º–Ω–∏–ªÔ∏è", callback_data="remembered")
        keyboard.add(button)
        text = "\n".join([key + " - " + "data[key]" for key in data])
        return {"keyboard": keyboard, "text": text}

    def get_word_keys_data(self, chat_id, word_number, more=False):
        words_list, words_dict = Api().get_list_words(chat_id)
        n_words = len(words_list)
        word_number = int(word_number)
        prev_n = word_number - 1 if word_number else word_number
        next_n = word_number + 1 if word_number + 1 < n_words else word_number

        keyboard = types.InlineKeyboardMarkup()
        buttons = [types.InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data="goto " + str(prev_n))]
        buttons += [
            types.InlineKeyboardButton(text=str(word_number + 1) + "/" + str(n_words), callback_data="start_quiz")]
        buttons += [types.InlineKeyboardButton(text="‚û°Ô∏è", callback_data="goto " + str(next_n))]
        buttons += [types.InlineKeyboardButton(text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data="more " + str(word_number))]
        buttons += [types.InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ç–µ—Å—Ç—É", callback_data="start_quiz")]
        keyboard.add(*buttons[:3])
        keyboard.add(buttons[3])
        if word_number + 1 == n_words:
            keyboard.add(buttons[4])

        word = words_list[word_number]


        pos = words_dict[word].get("pos", "")
        level = words_dict[word].get("level", "")

        ts = words_dict[word]["translate"]
        audio = words_dict[word].get("audio", "")
        audio = LangBotApi.get_word_audio_by_path(audio)
        transcription = ts.get("ts")
        meanings = ts.get("tr")
        examples = ts.get("ex", list())
        synonyms = ts.get("syn", list())
        # –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: [k…ínst…™ÀàtjuÀê Én]
        # –°—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ
        text = f"*{word}*"
        if transcription:
            text += "\n–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: [" + transcription + "]"
        text += "\n" + pos_dict.get(pos, pos)
        if level and False:
            text += " topic: " + level
        text += "\n"
        for mng in meanings:
            text += "\n¬∑ " + mng
            if more:  # –æ–±—ã—á–Ω–æ –ª–æ–∂—å, –º–æ–∂–µ—Ç –∫–æ–≥–¥–∞-—Ç–æ –∑–∞—Ä–∞–±–æ—Ç–∞–µ—Ç
                try:
                    if mng in synonyms and synonyms[mng]:
                        text += "\n  " + "synonyms:\n" + ",".join(synonyms[mng])
                    if mng in examples and examples[mng]:
                        text += "\n  " + "examples:"
                        for exmpl in examples[mng]:
                            text += "\n¬∑" + exmpl["text"]
                            for ex_tr in exmpl["tr"]:
                                text += " - " + ex_tr["text"]

                except Exception as e:
                    print(e)
                    text += "\n error \n"
        if more:
            text += ""
        data = {"text": text,
                "audio": audio,
                "keyboard": keyboard}

        return data

    def check_memorized(self, chat_id, correct_answer=None):
        next_word, next_word_translate = Api().get_next_word(chat_id)
        if next_word is None:  # –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è
            LangBotApi.add_rating(chat_id, 5)
            text = "–ò–∑—É—á–µ–Ω–∏–µ —Å–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ, –ø–æ–ª—É—á–∏ 5 ‚ù§\n\n"
            text += """üîπ–¢–µ–ø–µ—Ä—å —ç—Ç–∏ —Å–ª–æ–≤–∞ —Ç—ã –º–æ–∂–µ—à—å –∏–∑—É—á–∞—Ç—å –≤ *–ò–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–∏*, –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –±—ã—Å—Ç—Ä–µ–µ –∏—Ö –∑–∞–ø–æ–º–Ω–∏—Ç—å

üîπ–¢—ã –º–æ–∂–µ—à—å —É—á–∏—Ç—å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤ —Ä–∞–∑–¥–µ–ª–µ *–ò–∑—É—á–∞—Ç—å —Å–ª–æ–≤–∞*, –ø–æ 10/20/50 –≤ –¥–µ–Ω—å! 
"""
            keyboard = types.InlineKeyboardMarkup()
        else:
            randoms_words = Api().get_random_words(chat_id)
            keyboard = types.InlineKeyboardMarkup()
            buttons = [types.InlineKeyboardButton(text=next_word_translate, callback_data="good " + next_word)]
            for word in list(randoms_words):
                buttons.append(types.InlineKeyboardButton(text=word, callback_data="bad"))
            random.shuffle(buttons)
            for bt in buttons:
                keyboard.add(bt)
            text = ""
            if correct_answer is not None:
                text += "**–ù–µ–≤–µ—Ä–Ω–æ!**\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:\n"
                text += correct_answer[0] + " - " + correct_answer[1] + "**\n\n"
                text += "–≤–æ–∑–º–æ–∂–Ω–æ –Ω—É–∂–Ω–∞ –∫–Ω–æ–ø–∫–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"
            text += "*–í—ã–±–µ—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥*\n\n"
            text += f"*{next_word}*"

        return {"keyboard": keyboard, "text": text}

    def good_answer(self, chat_id):
        Api().poor_learned_one_word(chat_id)
        Api().remove_good_word(chat_id)
        return self.check_memorized(chat_id)

    def next_answer(self, chat_id):
        return self.check_memorized(chat_id)

    def bad_answer(self, chat_id):
        words_list, words_dict = Api().get_list_words(chat_id)
        data = self.get_word_keys_data(chat_id, words_list.index(Api().get_good_word(chat_id)[0]))
        data['text'] = "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!\n" + data["text"]
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(text="–ó–∞–ø–æ–º–Ω–∏–ª(–∞)", callback_data="next"))
        data["keyboard"] = keyboard
        # print("1\n"*5, Api().get_good_word(chat_id),"2\n"*5, sep = "\n"*5)
        return data
        # return self.check_memorized(chat_id, correct_answer = Api().get_good_word(chat_id))


class TestLevel:

    def test_question_data(self, chat_id):
        next_word, next_word_translate, count = Api().get_next_test_word(chat_id)
        if next_word is None:  # –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è
            goal = 80
            score = Api().get_test_score(chat_id)
            percent = int((score[0] / score[1]) * 100)
            if percent > goal:
                LangBotApi.add_rating(chat_id, 20)
                text = "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω.\n–í—ã –ø–æ–ª—É—á–∏–ª–∏ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å: *" + \
                       levels_str[Api().get_next_level(chat_id)] + "* –∏ 20 ‚ù§"
                Api().set_next_level(chat_id)
            else:
                text = "–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω.\n"
                text += "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ –ø—Ä–æ—à–ª–∏ —Ç–µ—Å—Ç.\n–î–æ —É—Ä–æ–≤–Ω—è " + levels_str[Api().get_next_level(chat_id)] + "\n"
                text += "–í–∞–º –Ω–µ —Ö–≤–∞—Ç–∏–ª–æ " + str(goal - percent + 1) + "%"
            text += "\n–í—ã –Ω–∞–±—Ä–∞–ª–∏ " + str(percent) + "% (" + str(score[0]) + " –∏–∑ " + str(score[1]) + ")."
            keyboard = types.InlineKeyboardMarkup()
        else:
            # randoms_words = Api().get_random_test_words(chat_id)
            randoms_words = Api().get_random_words(chat_id)
            keyboard = types.InlineKeyboardMarkup()
            buttons = [types.InlineKeyboardButton(text=next_word_translate, callback_data="good " + next_word)]
            for word in list(randoms_words):
                buttons.append(types.InlineKeyboardButton(text=word, callback_data="bad"))
            random.shuffle(buttons)
            for bt in buttons:
                keyboard.add(bt)
            text = ""
            text += f"_–û—Å—Ç–∞–ª–æ—Å—å {count} –≤–æ–ø—Ä–æ—Å–æ–≤_\n\n"
            text += "**–í—ã–±–µ—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥**\n\n"
            text += f"*{next_word}*"

        return {"keyboard": keyboard, "text": text}

    def test_answer(self, chat_id, good=False):
        Api().remove_test_word(chat_id, good=good)
        return self.test_question_data(chat_id)


class Topics:

    def get_topics(self, user_id=None):
        data = LangBotApi.get_topics()
        topics_b = []
        for topic in data[:50]:
            print(topic)
            if user_id is None:
                text = '–í—ã–±—Ä–∞–Ω–∞ —Ç–µ–º–∞: ' + topic['name']
                keyboard=None
            else:
                text = '–í–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ –Ω–∞ –±–∏—Ç–≤—É!\n–¢–µ–º–∞: ' + topic['name']
                keyboard = types.InlineKeyboardMarkup()
                keyboard.add(types.InlineKeyboardButton(text="–ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–≤–∏–µ –≤ –∏–≥—Ä–µ",
                                                      url=get_tg_link('g'+str(user_id))))
            if topic['image'] and ("http://5.187.6.15" in topic['image']):
                topic['image'] = topic['image'].replace("http://5.187.6.15", "https://botenglish.ru")
            topics_b.append(types.InlineQueryResultArticle(topic['id'],
                                                           title=topic['name'],
                                                           # description='–í–∞–º–∏ –≤—ã—É—á–µ–Ω–æ 0 –∏–∑ 54',
                                                           thumb_url=topic['image'],
                                                           input_message_content=types.InputTextMessageContent(
                                                               text),
                                                           reply_markup=keyboard))
        return topics_b
